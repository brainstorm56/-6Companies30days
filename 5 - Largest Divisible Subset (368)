
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.size()==0||nums.size()==1)
        {
            return nums;
        }
        int n = nums.size();
        vector<int>v;
        vector<int> dp(n,1);
        for(int i=0;i<n;i++){ dp[i]=1; }
        int max = INT_MIN;
        sort(nums.begin(),nums.end());
            for(int i=1;i<n;i++){
                for(int j=i-1;j>=0;j--)
                {
                    int t = 0;
                    if(nums[i]%nums[j]==0)
                    {
                        t = dp[j]+1;
                    }
                    if(t>dp[i]){ dp[i]=t;}
                }
                if(dp[i]>max){max = dp[i];}
            }
            int a=0;
            for(int i=n-1;i>=0;i--)
            {
                if(max==dp[i] &&a%nums[i]==0 )
                {
                    v.push_back(nums[i]);
                    a = nums[i];
                    max--;
                }
            }
            return v;
    }
};


Submission Link - https://leetcode.com/problems/largest-divisible-subset/submissions/872721897/
